from modules import youtube_parser, whisper_transcribe, predict

# 1. –°—ñ–ª—Ç–µ–º–µ–ª–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É
links = youtube_parser.load_links("data/example_links.txt")

# 2. ”ò—Ä–±—ñ—Ä —Å—ñ–ª—Ç–µ–º–µ –±–æ–π—ã–Ω—à–∞ ”©“£–¥–µ—É
for link in links:
    print(f"\nüîó –°—ñ–ª—Ç–µ–º–µ ”©“£–¥–µ–ª—É–¥–µ: {link}")

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π–ª–µ—Ä–¥—ñ –∞–ª—É
    comments_text = youtube_parser.process(link)
    print("\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π–ª–µ—Ä:")
    print(comments_text)

    # –ê—É–¥–∏–æ–Ω—ã –º”ô—Ç—ñ–Ω–≥–µ –∞–π–Ω–∞–ª–¥—ã—Ä—É
    audio_text = whisper_transcribe.process_audio(link)
    print("\nüó£ –í–∏–¥–µ–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Å—ã:")
    print(audio_text)

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π + –∞—É–¥–∏–æ –±—ñ—Ä—ñ–∫—Ç—ñ—Ä—É
    final_text = comments_text + "\n" + audio_text

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ—Å—ã–Ω–¥–∞ ”©–∑–≥–µ—Ä—Ç—É –∫–µ—Ä–µ–∫)
    result, predicted_class = predict.predict(final_text)

    # –ù”ô—Ç–∏–∂–µ —à—ã“ì–∞—Ä—É
    print("\nüìã –ü–∞–π—ã–∑–¥–∞—Ä:")
    for k, v in result.items():
        print(f"  - {k}: {v}%")
    
    print(f"\nüèÜ –ù–µ–≥—ñ–∑–≥—ñ –∫–ª–∞—Å—Å: {predicted_class}")

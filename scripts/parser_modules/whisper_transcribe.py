import whisper
import os

# FFmpeg –∂–æ–ª—ã–Ω –∫”©—Ä—Å–µ—Ç—É
FFMPEG_PATH = r"D:\Hakaton\ffmpeg\bin"
os.environ["PATH"] += os.pathsep + FFMPEG_PATH

# Whisper –º–æ–¥–µ–ª—ñ–Ω –∂“Ø–∫—Ç–µ—É
model = whisper.load_model("base")

# üî• –õ–æ–∫–∞–ª —Ñ–∞–π–ª–¥—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∂–∞—Å–∞—É
def process_audio_file(audio_file_path):
    if not os.path.exists(audio_file_path):
        print(f"‚ùå –§–∞–π–ª —Ç–∞–±—ã–ª–º–∞–¥—ã: {audio_file_path}")
        return ""

    result = model.transcribe(audio_file_path)
    print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—è“õ—Ç–∞–ª–¥—ã: {audio_file_path}")
    return result["text"]

# üî• YouTube/Instagram —Å—Å—ã–ª–∫–∞—Å—ã–Ω–∞–Ω –∞—É–¥–∏–æ –∞–ª—É (–∞—Ä–Ω–∞–π—ã YouTube “Ø—à—ñ–Ω)
def download_audio(link, output_path="temp_audio.%(ext)s"):
    import yt_dlp
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': output_path,
        'quiet': False,
        'ffmpeg_location': FFMPEG_PATH,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }
    final_path = "temp_audio.mp3"

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            ydl.download([link])
        except Exception as e:
            print("‚ùå –ê—É–¥–∏–æ–Ω—ã –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑:", e)
            return None

    if os.path.exists(final_path):
        print("‚úÖ –ê—É–¥–∏–æ —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ:", final_path)
        return final_path
    else:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return None

# üî• YouTube “Ø—à—ñ–Ω —Ç–æ–ª—ã“õ –ø—Ä–æ—Ü–µ—Å—Å
def process_audio(link):
    audio_path = download_audio(link)
    if audio_path is None:
        return ""

    result = model.transcribe(audio_path)
    os.remove(audio_path)
    return result["text"]

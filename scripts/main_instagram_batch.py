# D:\Hakaton\scripts\main_instagram_batch.py

from modules import instagram_parser, whisper_transcribe, predict

def process_instagram_link(link):
    print(f"\nüîó –°—ñ–ª—Ç–µ–º–µ ”©“£–¥–µ–ª—É–¥–µ: {link}")
    post_text, video_path = instagram_parser.process_instagram(link)

    audio_text = ""
    if video_path:
        print("\nüó£ –í–∏–¥–µ–æ –∞—É–¥–∏–æ—Å—ã–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∂–∞—Å–∞–ø –∂–∞—Ç—ã—Ä–º—ã–∑...")
        audio_text = whisper_transcribe.process_audio(video_path)

    final_text = post_text.strip() + "\n" + audio_text.strip()

    if not final_text.strip():
        print("‚ö† –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã (–ø–æ—Å—Ç —Ç–∞, –≤–∏–¥–µ–æ –¥–∞ –∂–æ“õ). ”®—Ç–∫—ñ–∑—ñ–ø –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
        return

    print("\nü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –±–∞—Å—Ç–∞–ª–¥—ã...")
    result, predicted_class = predict.predict(final_text)

    print("\nüìã –ü–∞–π—ã–∑–¥–∞—Ä:")
    for k, v in result.items():
        print(f"  - {k}: {v}%")
    
    print(f"\nüèÜ –ù–µ–≥—ñ–∑–≥—ñ –∫–ª–∞—Å—Å: {predicted_class}")

def load_links(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        links = [line.strip() for line in f if line.strip()]
    return links

if __name__ == "__main__":
    print("üöÄ 'data/instagram_links.txt' —Ñ–∞–π–ª—ã–Ω –æ“õ—ã–ø –∂–∞—Ç—ã—Ä–º—ã–∑...")
    links = load_links('data/instagram_links.txt')

    if not links:
        print("‚ö† –§–∞–π–ª –±–æ—Å –Ω–µ–º–µ—Å–µ —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã!")
    else:
        for link in links:
            process_instagram_link(link)

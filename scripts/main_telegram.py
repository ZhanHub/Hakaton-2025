# main_telegram.py
import asyncio
from modules import telegram_parser, whisper_transcribe, predict

def classify_text(full_text):
    print("\nü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –±–∞—Å—Ç–∞–ª–¥—ã...")
    result, predicted_class = predict.predict(full_text)

    print("\nüìã –ü–∞–π—ã–∑–¥–∞—Ä:")
    for k, v in result.items():
        print(f"  - {k}: {v}%")

    print(f"\nüèÜ –ù–µ–≥—ñ–∑–≥—ñ –∫–ª–∞—Å—Å: {predicted_class}")

async def main():
    print("üöÄ –¢–µ–ª–µ–≥—Ä–∞–º —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    link = input(">>> ")

    text, media_path = await telegram_parser.process_telegram_link(link)

    audio_text = ""
    if media_path:
        print("\nüó£ –ê—É–¥–∏–æ–Ω—ã —Ç–µ–∫—Å—Ç–∫–µ –∞–π–Ω–∞–ª–¥—ã—Ä—ã–ø –∂–∞—Ç—ã—Ä–º—ã–∑...")
        audio_text = whisper_transcribe.process_audio(media_path)
        if os.path.exists(media_path):
            os.remove(media_path)

    final_text = text.strip() + "\n" + audio_text.strip()

    if not final_text.strip():
        print("‚ö† –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã (–ø–æ—Å—Ç —Ç–∞, –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –¥–∞ –∂–æ“õ).")
    else:
        classify_text(final_text)

    await telegram_parser.close_client()

if __name__ == "__main__":
    asyncio.run(main())
